// Serialized code written from:
// E:\property-investment-calculator\src\App.css
// E:\property-investment-calculator\src\App.js
// E:\property-investment-calculator\src\App.test.js
// E:\property-investment-calculator\src\components\MortgageRates.js
// E:\property-investment-calculator\src\components\PropertyForm.js
// E:\property-investment-calculator\src\components\PropertyMap.js
// E:\property-investment-calculator\src\components\Results.js
// E:\property-investment-calculator\src\contexts\MapContainerContext.js
// E:\property-investment-calculator\src\index.css
// E:\property-investment-calculator\src\index.js
// E:\property-investment-calculator\src\logo.svg
// E:\property-investment-calculator\src\reportWebVitals.js
// E:\property-investment-calculator\src\services\api.js
// E:\property-investment-calculator\src\setupTests.js
// E:\property-investment-calculator\src\utils\calculations.js

// File: E:\property-investment-calculator\src\App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\App.js
import React, { useState, useEffect } from "react";
import PropertyMap from "./components/PropertyMap";
import PropertyForm from "./components/PropertyForm";
import Results from "./components/Results";
import MortgageRates from "./components/MortgageRates";
import { MapContainerProvider } from "./contexts/MapContainerContext";
import { fetchRentalData, fetchCurrentMortgageRates } from "./services/api";
import {
  calculateMortgagePayment,
  estimateExpenses,
  calculateNOI,
  calculateCoC,
} from "./utils/calculations";

function App() {
  const defaultProperty = {
    price: 500000,
    bedrooms: 4,
    bathrooms: 3,
    sqft: 2500,
  };

  const [propertyList, setPropertyList] = useState([]);
  const [selectedProperty, setSelectedProperty] = useState(defaultProperty);
  const [downPayment, setDownPayment] = useState(0);
  const [mortgageTerm, setMortgageTerm] = useState(30);
  const [rentalData, setRentalData] = useState(null);
  const [mortgageData, setMortgageData] = useState(null);
  const [NOI, setNOI] = useState(0);
  const [CoC, setCoC] = useState(0);
  const [postalCode, setPostalCode] = useState("98006");

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    const rentalData = await fetchRentalData();
    const mortgageData = await fetchCurrentMortgageRates(postalCode);
    setRentalData(rentalData);
    setMortgageData(mortgageData.data.loan_analysis.market.mortgage_data);
  };

  useEffect(() => {
    if (!selectedProperty || !rentalData || !mortgageData) return;

    const mortgagePayment = calculateMortgagePayment(
      selectedProperty.price - downPayment,
      getSelectedMortgageRate(),
      mortgageTerm
    );
    const expenses = estimateExpenses(selectedProperty, rentalData);
    const NOI = calculateNOI(rentalData, expenses);
    const CoC = calculateCoC(NOI, downPayment, mortgagePayment);

    setNOI(NOI);
    setCoC(CoC);
  }, [selectedProperty, downPayment, mortgageTerm, rentalData, mortgageData]);

  const handlePostalCodeChange = (event) => {
    setPostalCode(event.target.value);
  };

  const refreshMortgageRates = async () => {
    const mortgageData = await fetchCurrentMortgageRates(postalCode);
    setMortgageData(mortgageData.data.loan_analysis.market.mortgage_data);
  };

  function getSelectedMortgageRate() {
    if (!mortgageData || !mortgageData.average_rates) return 0;

    const selectedRate = mortgageData.average_rates.find(
      (rate) => rate.loan_type.term === mortgageTerm
    );
    return selectedRate ? selectedRate.rate : 0;
  }

  return (
    <MapContainerProvider>
      <div className="App">
        <h1>Property Investment Calculator</h1>
        <label htmlFor="postal-code">Postal Code: </label>
        <input
          id="postal-code"
          type="text"
          value={postalCode}
          onChange={handlePostalCodeChange}
        />
        <button onClick={refreshMortgageRates}>Refresh Mortgage Rates</button>
        <PropertyMap
          propertyList={propertyList}
          onPropertySelect={setSelectedProperty}
        />
        <PropertyForm
          onDownPaymentChange={setDownPayment}
          onMortgageTermChange={setMortgageTerm}
        />

        {mortgageData ? (
          <MortgageRates mortgageData={mortgageData} />
        ) : (
          <p>Loading mortgage rates...</p>
        )}
        <Results NOI={NOI} CoC={CoC} />
      </div>
    </MapContainerProvider>
  );
}

export default App;

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\components\MortgageRates.js
import React from "react";

const MortgageRates = ({ mortgageData }) => {
  const { insurance_rate, property_tax_rate, average_rates } = mortgageData;

  return (
    <div>
      <h2>Mortgage Rates</h2>
      <table>
        <thead>
          <tr>
            <th>Loan Type</th>
            <th>Term (Years)</th>
            <th>Rate</th>
          </tr>
        </thead>
        <tbody>
          {average_rates.map((rateObj) => (
            <tr key={rateObj.loan_type.loan_id}>
              <td>{rateObj.loan_type.display_name}</td>
              <td>{rateObj.loan_type.term}</td>
              <td>{(rateObj.rate * 100).toFixed(2)}%</td>
            </tr>
          ))}
        </tbody>
      </table>
      <p>
        Insurance Rate: {(insurance_rate * 100).toFixed(2)}% | Property Tax
        Rate: {(property_tax_rate * 100).toFixed(2)}%
      </p>
    </div>
  );
};

export default MortgageRates;

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\components\PropertyForm.js
import React from "react";

const PropertyForm = ({ onDownPaymentChange, onMortgageTermChange }) => {
  const handleDownPaymentChange = (event) => {
    onDownPaymentChange(event.target.value);
  };

  const handleMortgageTermChange = (event) => {
    onMortgageTermChange(event.target.value);
  };

  return (
    <form>
      <div>
        <label htmlFor="downPayment">Down Payment:</label>
        <input
          type="number"
          id="downPayment"
          name="downPayment"
          step="0.01"
          min="0"
          onChange={handleDownPaymentChange}
        />
      </div>
      <div>
        <label htmlFor="mortgageTerm">Mortgage Term (years):</label>
        <input
          type="number"
          id="mortgageTerm"
          name="mortgageTerm"
          min="1"
          onChange={handleMortgageTermChange}
        />
      </div>
    </form>
  );
};

export default PropertyForm;

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\components\PropertyMap.js
import React, { useEffect } from "react";
import L from "leaflet";
import "leaflet/dist/leaflet.css";
import { useMapContainer } from "../contexts/MapContainerContext";

// Define default values for the map
const defaultLatitude = 39.8283;
const defaultLongitude = -98.5795;
const defaultZoomLevel = 4;

const PropertyMap = ({ propertyList = [], onPropertySelect }) => {
  const { mapContainer } = useMapContainer();

  useEffect(() => {
    if (!mapContainer || propertyList.length === 0) return;

    const map = L.map(mapContainer).setView(
      [defaultLatitude, defaultLongitude],
      defaultZoomLevel
    );

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    propertyList.forEach((property) => {
      const marker = L.marker([property.latitude, property.longitude]).addTo(
        map
      );
      marker.on("click", () => {
        onPropertySelect(property);
      });
    });
  }, [mapContainer, propertyList, onPropertySelect]);

  return (
    <div
      id="map"
      style={{ width: "100%", height: "600px" }}
      ref={mapContainer}
    ></div>
  );
};

export default PropertyMap;

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\components\Results.js
import React from "react";

const Results = ({ NOI, CoC }) => {
  return (
    <div>
      <h2>Results</h2>
      <p>
        Net Operating Income (NOI): <strong>${NOI.toFixed(2)}</strong>
      </p>
      <p>
        Cash on Cash Return (CoC): <strong>{(CoC * 100).toFixed(2)}%</strong>
      </p>
    </div>
  );
};

export default Results;

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\contexts\MapContainerContext.js
import React from "react";
import { createContext, useContext, useRef } from "react";

const MapContainerContext = createContext();

export const useMapContainer = () => {
  return useContext(MapContainerContext);
};

export const MapContainerProvider = ({ children }) => {
  const mapContainer = useRef(null);

  return (
    <MapContainerContext.Provider value={{ mapContainer }}>
      {children}
    </MapContainerContext.Provider>
  );
};

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\index.css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\logo.svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\services\api.js
const MLS_API_BASE_URL = "https://example-mls-api.com";
const RENTAL_API_BASE_URL = "https://example-rental-api.com";
const MORTGAGE_RATE_API_BASE_URL = "https://realty-in-us.p.rapidapi.com";

const MLS_API_KEY = "your-mls-api-key";
const RENTAL_API_KEY = "your-rental-api-key";
const MORTGAGE_RATE_API_KEY = process.env.REACT_APP_MORTGAGE_RATE_API_KEY;

// ... Other API fetching functions ...

// Functions to fetch data from MLS, rental, and mortgage rate APIs
export async function fetchPropertyDataFromMLS() {
  // Mock property data for postal code 98006
  return [
    {
      id: 1,
      latitude: 47.5534,
      longitude: -122.1598,
      price: 900000,
    },
    {
      id: 2,
      latitude: 47.5619,
      longitude: -122.1491,
      price: 1200000,
    },
  ];
}

export async function fetchRentalData() {
  // Mock rental data
  return {
    monthlyRent: 3500,
    vacancyRate: 0.05,
    annualRentIncrease: 0.03,
  };
}

export async function fetchCurrentMortgageRates(postalCode) {
  const options = {
    method: "GET",
    headers: {
      "X-RapidAPI-Key": MORTGAGE_RATE_API_KEY,
      "X-RapidAPI-Host": "realty-in-us.p.rapidapi.com",
    },
  };

  const url = `${MORTGAGE_RATE_API_BASE_URL}/mortgage/v2/check-rates?postal_code=${postalCode}`;
  const response = await fetch(url, options);

  if (!response.ok) {
    throw new Error(`Error fetching mortgage rates: ${response.statusText}`);
  }

  const data = await response.json();
  return data;
}

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

--------------------------------------------------------------------------------
// File: E:\property-investment-calculator\src\utils\calculations.js
// Functions to perform calculations (NOI, CoC, etc.)

// Calculate the monthly mortgage payment based on loan amount, interest rate, and loan term
export function calculateMortgagePayment(loanAmount, interestRate, term) {
  const rate = interestRate / 12;
  const numOfPayments = term * 12;
  const monthlyPayment =
    (loanAmount * rate * Math.pow(1 + rate, numOfPayments)) /
    (Math.pow(1 + rate, numOfPayments) - 1);

  return monthlyPayment;
}

// Estimate the expenses (tax, insurance, maintenance, etc.) based on property and rental data
export function estimateExpenses(property, rentalData) {
  const tax = property.propertyTaxRate * property.price;
  const insurance = property.insuranceRate * property.price;
  const maintenance = rentalData.maintenanceCost;
  const managementFees = rentalData.managementFeeRate * rentalData.grossRent;

  return {
    tax,
    insurance,
    maintenance,
    managementFees,
  };
}

// Calculate Net Operating Income (NOI) based on rental data and expenses
export function calculateNOI(rentalData, expenses) {
  const grossRent = rentalData.grossRent;
  const totalExpenses =
    expenses.tax +
    expenses.insurance +
    expenses.maintenance +
    expenses.managementFees;

  return grossRent - totalExpenses;
}

// Calculate Cash-on-Cash return (CoC) based on NOI, downPayment, and mortgage payment
export function calculateCoC(NOI, downPayment, mortgagePayment) {
  const annualNOI = NOI * 12;
  const annualMortgagePayment = mortgagePayment * 12;
  const cashFlow = annualNOI - annualMortgagePayment;

  return (cashFlow / downPayment) * 100;
}

--------------------------------------------------------------------------------
